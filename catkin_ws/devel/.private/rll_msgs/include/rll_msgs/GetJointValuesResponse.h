// Generated by gencpp from file rll_msgs/GetJointValuesResponse.msg
// DO NOT EDIT!


#ifndef RLL_MSGS_MESSAGE_GETJOINTVALUESRESPONSE_H
#define RLL_MSGS_MESSAGE_GETJOINTVALUESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rll_msgs
{
template <class ContainerAllocator>
struct GetJointValuesResponse_
{
  typedef GetJointValuesResponse_<ContainerAllocator> Type;

  GetJointValuesResponse_()
    : success(false)
    , error_code(0)
    , joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)
    , joint_4(0.0)
    , joint_5(0.0)
    , joint_6(0.0)
    , joint_7(0.0)  {
    }
  GetJointValuesResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error_code(0)
    , joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)
    , joint_4(0.0)
    , joint_5(0.0)
    , joint_6(0.0)
    , joint_7(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef double _joint_1_type;
  _joint_1_type joint_1;

   typedef double _joint_2_type;
  _joint_2_type joint_2;

   typedef double _joint_3_type;
  _joint_3_type joint_3;

   typedef double _joint_4_type;
  _joint_4_type joint_4;

   typedef double _joint_5_type;
  _joint_5_type joint_5;

   typedef double _joint_6_type;
  _joint_6_type joint_6;

   typedef double _joint_7_type;
  _joint_7_type joint_7;





  typedef boost::shared_ptr< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointValuesResponse_

typedef ::rll_msgs::GetJointValuesResponse_<std::allocator<void> > GetJointValuesResponse;

typedef boost::shared_ptr< ::rll_msgs::GetJointValuesResponse > GetJointValuesResponsePtr;
typedef boost::shared_ptr< ::rll_msgs::GetJointValuesResponse const> GetJointValuesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator1> & lhs, const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error_code == rhs.error_code &&
    lhs.joint_1 == rhs.joint_1 &&
    lhs.joint_2 == rhs.joint_2 &&
    lhs.joint_3 == rhs.joint_3 &&
    lhs.joint_4 == rhs.joint_4 &&
    lhs.joint_5 == rhs.joint_5 &&
    lhs.joint_6 == rhs.joint_6 &&
    lhs.joint_7 == rhs.joint_7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator1> & lhs, const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rll_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e5a3555469b4e8d3327599e7f25c1a4";
  }

  static const char* value(const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e5a3555469b4e8dULL;
  static const uint64_t static_value2 = 0x3327599e7f25c1a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rll_msgs/GetJointValuesResponse";
  }

  static const char* value(const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"uint8 error_code\n"
"float64 joint_1\n"
"float64 joint_2\n"
"float64 joint_3\n"
"float64 joint_4\n"
"float64 joint_5\n"
"float64 joint_6\n"
"float64 joint_7\n"
"\n"
;
  }

  static const char* value(const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error_code);
      stream.next(m.joint_1);
      stream.next(m.joint_2);
      stream.next(m.joint_3);
      stream.next(m.joint_4);
      stream.next(m.joint_5);
      stream.next(m.joint_6);
      stream.next(m.joint_7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointValuesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rll_msgs::GetJointValuesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rll_msgs::GetJointValuesResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "joint_1: ";
    Printer<double>::stream(s, indent + "  ", v.joint_1);
    s << indent << "joint_2: ";
    Printer<double>::stream(s, indent + "  ", v.joint_2);
    s << indent << "joint_3: ";
    Printer<double>::stream(s, indent + "  ", v.joint_3);
    s << indent << "joint_4: ";
    Printer<double>::stream(s, indent + "  ", v.joint_4);
    s << indent << "joint_5: ";
    Printer<double>::stream(s, indent + "  ", v.joint_5);
    s << indent << "joint_6: ";
    Printer<double>::stream(s, indent + "  ", v.joint_6);
    s << indent << "joint_7: ";
    Printer<double>::stream(s, indent + "  ", v.joint_7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RLL_MSGS_MESSAGE_GETJOINTVALUESRESPONSE_H
