// Generated by gencpp from file rll_msgs/JobEnvGoal.msg
// DO NOT EDIT!


#ifndef RLL_MSGS_MESSAGE_JOBENVGOAL_H
#define RLL_MSGS_MESSAGE_JOBENVGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rll_msgs
{
template <class ContainerAllocator>
struct JobEnvGoal_
{
  typedef JobEnvGoal_<ContainerAllocator> Type;

  JobEnvGoal_()
    : authentication_secret()
    , client_ip_addr()  {
    }
  JobEnvGoal_(const ContainerAllocator& _alloc)
    : authentication_secret(_alloc)
    , client_ip_addr(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _authentication_secret_type;
  _authentication_secret_type authentication_secret;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _client_ip_addr_type;
  _client_ip_addr_type client_ip_addr;





  typedef boost::shared_ptr< ::rll_msgs::JobEnvGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rll_msgs::JobEnvGoal_<ContainerAllocator> const> ConstPtr;

}; // struct JobEnvGoal_

typedef ::rll_msgs::JobEnvGoal_<std::allocator<void> > JobEnvGoal;

typedef boost::shared_ptr< ::rll_msgs::JobEnvGoal > JobEnvGoalPtr;
typedef boost::shared_ptr< ::rll_msgs::JobEnvGoal const> JobEnvGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rll_msgs::JobEnvGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rll_msgs::JobEnvGoal_<ContainerAllocator1> & lhs, const ::rll_msgs::JobEnvGoal_<ContainerAllocator2> & rhs)
{
  return lhs.authentication_secret == rhs.authentication_secret &&
    lhs.client_ip_addr == rhs.client_ip_addr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rll_msgs::JobEnvGoal_<ContainerAllocator1> & lhs, const ::rll_msgs::JobEnvGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rll_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rll_msgs::JobEnvGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rll_msgs::JobEnvGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rll_msgs::JobEnvGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8914a2dc1274b4dcf064150662370a1c";
  }

  static const char* value(const ::rll_msgs::JobEnvGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8914a2dc1274b4dcULL;
  static const uint64_t static_value2 = 0xf064150662370a1cULL;
};

template<class ContainerAllocator>
struct DataType< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rll_msgs/JobEnvGoal";
  }

  static const char* value(const ::rll_msgs::JobEnvGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string authentication_secret\n"
"string client_ip_addr\n"
;
  }

  static const char* value(const ::rll_msgs::JobEnvGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.authentication_secret);
      stream.next(m.client_ip_addr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JobEnvGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rll_msgs::JobEnvGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rll_msgs::JobEnvGoal_<ContainerAllocator>& v)
  {
    s << indent << "authentication_secret: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.authentication_secret);
    s << indent << "client_ip_addr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.client_ip_addr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RLL_MSGS_MESSAGE_JOBENVGOAL_H
